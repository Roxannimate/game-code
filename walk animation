using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MonoBehaviour {

    //Declaring Variables.
    public float speed = 5f;//CharacterSpeed.
    public bool right = false; //Is the character facing right?
    private Rigidbody2D characterPhysics; //Physics Controller
    private float xmove; // X movement value
    private float ymove; // Y movement value
    private SpriteRenderer spriteRend; // Sprite renderer component.
    private Animator animator;

	// Use this for initialization
	void Start () {
        characterPhysics = GetComponent<Rigidbody2D>(); // Get the Rigidbody2D Component.
        spriteRend = GetComponent<SpriteRenderer>(); //Get the SpriteRenderer Component.
        animator = GetComponent<Animator>();
	}

    //Used for Physics Calculations.
    private void FixedUpdate()
    {
        xmove = Input.GetAxis("Horizontal") * speed; //Get the Horizontal Movement between -1 and 1, multiply by speed.    
        ymove = Input.GetAxis("Vertical") * speed; //Get the Vertical Movement between -1 and 1, multiply by speed.  
        Vector2 move = new Vector2(xmove, ymove); //Create a vector (x,y), containing our direction values.
        characterPhysics.velocity = Vector2.Lerp(characterPhysics.velocity, move, 0.8f);

        if (xmove > 0 && !right)
        {
            Flip();
        } else if (xmove < 0 && right)
        {
            Flip();
        }
    }
    // Update is called once per frame
    void Update () {
        spriteRend.sortingOrder = UpdateSortOrder();

        // If player is moving then trigger walk animation.
        if (xmove != 0 || ymove ! = 0){
            //Walk True
            animator.SetBool("Walk", true);
        } else {
            //Walk false
            animator.SetBool("Walk", false);

        }

    }

    int UpdateSortOrder()    {
        //Generate a sort order number based on Y-position in the world.
        float height = spriteRend.bounds.min.y;
        return (Mathf.Abs(Mathf.RoundToInt((height * 100f))));
    }

    void Flip()
    {
        right = !right;// Invert Boolean
        Vector3 scale = transform.localScale; //Get Character's tranform.
        float x = scale.x; // Create float called x and store the current x value in it.
        x = x * -1; // Invert x value to or from minus
        scale.Set(x, scale.y, scale.z); // Set new scale
        transform.localScale = scale; //Apply it to character to flip.
    }

}
